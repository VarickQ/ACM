/*
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;
#define CLR(arr,val) memset(arr,val,sizeof(arr));
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define Lowbit(x) ((x)&(-x))
const int N = 150005;
typedef long long LL;

int p, q, cnt;
LL ans[N],res[20][20][2];
char s1[20],s2[20],mark[N];
int main(){
////////////////////////////////////////
#ifndef ONLINE_JUDGE
	//freopen("in.txt","r",stdin);
	freopen("in.txt","w",stdout);
#endif
////////////////////////////////////////
	for( p=1 ; p <= 17 ; ++p ) for( q=1 ; q<=17 ; ++q ){
		CLR( s1, 0 );
		CLR( s2, 0 );
		CLR( mark, 0 );
		cnt = 0;
		s1[p] = s2[p] = '\0';
		int len;
		for(int i=0 ; i < (1<<(p-1)) ; ++i){
			s1[0] = '1';
			s2[0] = '2';
			len = p-1;
			int st = i;
			if( mark[st] ) continue;
			mark[st] = true;
			for(int j=1 ; j < p ; ++j){
				if( st&1 ) s1[len] = s2[len] = '2';
				else s1[len] = s2[len] = '1';
				len--;
				st >>= 1;
			}
			LL tmp1,tmp2;
			sscanf( s1, "%lld", &tmp1 );
			sscanf( s2, "%lld", &tmp2 );
			if( tmp1%(1<<q) == 0 )
				ans[cnt++] = tmp1;
			if( tmp2%(1<<q) == 0 )
				ans[cnt++] = tmp2;
		}
		sort( ans, ans+cnt );
		if( cnt == 0 )
			printf("{-1,-1},\n");
		else if( cnt == 1 ){
			printf("{%lld,-1},\n",ans[0]);
		}
		else {
			printf("{%lld,%lld},\n",ans[0],ans[cnt-1]);
		}
	}
	return 0;
}
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;
#define CLR(arr,val) memset(arr,val,sizeof(arr));
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define Lowbit(x) ((x)&(-x))
const int N = 150005;
typedef long long LL;

LL c[300][2]={{2,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{12,22},
{12,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{112,222},
{112,212},
{112,-1},
{112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{1112,2222},
{1112,2212},
{1112,2112},
{2112,-1},
{2112,-1},
{2112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{11112,22222},
{11112,22212},
{11112,22112},
{12112,22112},
{22112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{111112,222222},
{111112,222212},
{111112,222112},
{112112,222112},
{122112,222112},
{122112,-1},
{122112,-1},
{122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{1111112,2222222},
{1111112,2222212},
{1111112,2222112},
{1112112,2222112},
{1122112,2222112},
{1122112,2122112},
{2122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{11111112,22222222},
{11111112,22222212},
{11111112,22222112},
{11112112,22222112},
{11122112,22222112},
{11122112,22122112},
{12122112,22122112},
{12122112,-1},
{12122112,-1},
{12122112,-1},
{12122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{111111112,222222222},
{111111112,222222212},
{111111112,222222112},
{111112112,222222112},
{111122112,222222112},
{111122112,222122112},
{112122112,222122112},
{112122112,212122112},
{212122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{1111111112,2222222222},
{1111111112,2222222212},
{1111111112,2222222112},
{1111112112,2222222112},
{1111122112,2222222112},
{1111122112,2222122112},
{1112122112,2222122112},
{1112122112,2212122112},
{1212122112,2212122112},
{1212122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{11111111112,22222222222},
{11111111112,22222222212},
{11111111112,22222222112},
{11111112112,22222222112},
{11111122112,22222222112},
{11111122112,22222122112},
{11112122112,22222122112},
{11112122112,22212122112},
{11212122112,22212122112},
{11212122112,21212122112},
{11212122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{111111111112,222222222222},
{111111111112,222222222212},
{111111111112,222222222112},
{111111112112,222222222112},
{111111122112,222222222112},
{111111122112,222222122112},
{111112122112,222222122112},
{111112122112,222212122112},
{111212122112,222212122112},
{111212122112,221212122112},
{111212122112,211212122112},
{111212122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{1111111111112,2222222222222},
{1111111111112,2222222222212},
{1111111111112,2222222222112},
{1111111112112,2222222222112},
{1111111122112,2222222222112},
{1111111122112,2222222122112},
{1111112122112,2222222122112},
{1111112122112,2222212122112},
{1111212122112,2222212122112},
{1111212122112,2221212122112},
{1111212122112,2211212122112},
{1111212122112,2111212122112},
{1111212122112,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{-1,-1},
{11111111111112,22222222222222},
{11111111111112,22222222222212},
{11111111111112,22222222222112},
{11111111112112,22222222222112},
{11111111122112,22222222222112},
{11111111122112,22222222122112},
{11111112122112,22222222122112},
{11111112122112,22222212122112},
{11111212122112,22222212122112},
{11111212122112,22221212122112},
{11111212122112,22211212122112},
{11111212122112,22111212122112},
{11111212122112,21111212122112},
{11111212122112,-1},
{11111212122112,-1},
{11111212122112,-1},
{11111212122112,-1},
{111111111111112,222222222222222},
{111111111111112,222222222222212},
{111111111111112,222222222222112},
{111111111112112,222222222222112},
{111111111122112,222222222222112},
{111111111122112,222222222122112},
{111111112122112,222222222122112},
{111111112122112,222222212122112},
{111111212122112,222222212122112},
{111111212122112,222221212122112},
{111111212122112,222211212122112},
{111111212122112,222111212122112},
{111111212122112,221111212122112},
{111111212122112,211111212122112},
{211111212122112,-1},
{-1,-1},
{-1,-1},
{1111111111111112,2222222222222222},
{1111111111111112,2222222222222212},
{1111111111111112,2222222222222112},
{1111111111112112,2222222222222112},
{1111111111122112,2222222222222112},
{1111111111122112,2222222222122112},
{1111111112122112,2222222222122112},
{1111111112122112,2222222212122112},
{1111111212122112,2222222212122112},
{1111111212122112,2222221212122112},
{1111111212122112,2222211212122112},
{1111111212122112,2222111212122112},
{1111111212122112,2221111212122112},
{1111111212122112,2211111212122112},
{1211111212122112,2211111212122112},
{1211111212122112,-1},
{-1,-1},
{11111111111111112,22222222222222222},
{11111111111111112,22222222222222212},
{11111111111111112,22222222222222112},
{11111111111112112,22222222222222112},
{11111111111122112,22222222222222112},
{11111111111122112,22222222222122112},
{11111111112122112,22222222222122112},
{11111111112122112,22222222212122112},
{11111111212122112,22222222212122112},
{11111111212122112,22222221212122112},
{11111111212122112,22222211212122112},
{11111111212122112,22222111212122112},
{11111111212122112,22221111212122112},
{11111111212122112,22211111212122112},
{11211111212122112,22211111212122112},
{11211111212122112,21211111212122112},
{11211111212122112,-1}
};
int main(){
	int T,cs=1,a,b;
	scanf("%d", &T);
	while( T-- ){
		scanf("%d%d", &a, &b);
		printf("Case %d: ", cs++);
		int t = (a-1)*17+b-1;
		if( c[t][0]==-1 && c[t][1]==-1 )
			puts("impossible");
		else if(  c[t][0]!=-1 && c[t][1]==-1 )
			printf("%lld\n", c[t][0]);
		else printf("%lld %lld\n", c[t][0],c[t][1]);
	}
	return 0;
}