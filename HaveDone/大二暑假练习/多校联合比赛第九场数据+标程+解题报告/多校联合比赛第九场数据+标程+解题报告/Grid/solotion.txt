    本题难点在于正确处理两种操作，不妨假设只有一种操作，那么这种操作如果是1的话那么就把操作按照a从小到大排序，每次都尽量往最左边涂，如果是2的话则类似的涂到最右边，但本题两种操作都出现了。
先考虑第一问:
    我们把所有的操作按类别区分开，假设所有的1操作尽量用上能从1涂到a格子，所有的2操作尽量用上能从b格子涂到n，假设a<b，那么答案显然是a+n-b+1。那么假设a>=b，那么假设1操作从1涂到x，那么2操作一定会从n尽量往左边涂，直到x为止。最后两边的总和就是答案。
    由上不难想到一个DP，l[i][j]表示用了前i种1操作，从1涂到j的最小操作数，转移l[i][j]=min(l[i][j],l[i-1][j-ope[i].x]+１)(ope[i].x<=j<=ope[i].a)，类似的，我们可以得到r[i][j]表示用2操作从j涂到n需要的最小操作数。dp复杂度O(n*m)。（这个背包也可以压缩一维，后面的l，r均为1维的状态）
    那么我们倒着枚举涂色最大的数目，假设为k，这个数目必然由1操作贡献一部分，由2操作贡献一部分（也可能一个贡献全部，另一个为0），那么我们枚举1操作涂到了i，那么2操作必然涂到了n-(k-i)+1，如果l[i]和r[n-(k-i)+1]均有值，那么说明这个最大数目是可达的，即是第一问的答案。枚举复杂度O(n*n)。
再考虑第二问：
    现在我们已经知道最大数目了，这个数目是由操作1和操作2一起贡献的，那么我们仍然可以枚举操作1涂到了i，那么操作2涂到了n-(ans-i)+1,如果l[i]和r[n-(k-i)+1]均有值，那么其和可以用来更新第二问的答案，最后第二问的答案为所有合法方案需操作数的最小值。枚举复杂度O(n*n)。
