栈+二分+DP
题目给出n个方块,宽度为1,高度给出,直线排列.
最左侧方块可以移动至最右侧,移动次数不限.
有k个单位的建筑材料,可以补充到任意方块上,且补充后的高度不能超过之前的最高方块,求最大储水量.

若不考虑补充的建筑材料,则将n个方块复制成3份,直接找出中间那份的最高方块,例如
1 3 2 5 2 3 4 | 1 3 2 [5] 2 3 4 | 1 3 2 5 2 3 4
                i     maxi

那么,maxi左右两侧的水体不会互相相通,因此,计算从maxi开始,以第i块为边界的最大装水量f[i],就可以计算出移动方块时的最大装水量了.
result = max{f[i]+f[i+n-1],n<=i<2*n}

当i从maxi开始向右扫描时,因为方块i肯定是和左侧最近的,高度大于等于本身的方块相匹配,之间的水体高度取决于方块i,因此,循环时维护一个单调栈,栈的栈顶第2个元素就是要找的匹配方块.
因此,在不考虑建筑材料时,O(n)即可得出结果.

如图,每个方块都与前面最近大于等于本身高度的块匹配,装水量为 2个方块间的距离*2个方块的较低高度 - 2个方块间其他方块的高度和,O(1)可算,从maxi开始扫描,每次将栈中小于h[i]的元素都出栈,将h[i]压入栈中.stack[top-2]即为左侧匹配的方块

   #
   #--#
 #-#-##-# 
 ######-##
##########
   |    |
  maxi  |
        i

接下来考虑有k个单位的建筑材料的问题.先考虑加1单位.
对于任何方块的情况,称起到挡水作用的块为关键块.如下图5块
   #
   #--#
 #-#-##-# 
 ######-##
##########
 1 2  3 45
那么,建筑材料加在非关键块上,肯定不如加在关键块上优.例如加在3、4之间，只能白占存水空间，肯定不如加在关键块4上。
因此，i从maxi开始循环时，建筑材料要么加在块i，要么加在前面的关键块上。

如果加在前面关键块，i的前面匹配块为prev，f[i][1] 表示maxi到第i块,加了1单位建筑材料的最大装水量
f[i][1] = f[prev][1] + h[now] * (i-prev-1)-(sum[i-1]-sum[prev])
如果加在块i,那么,块i高度+1,前面匹配块可能改变掉,应在stack二分查找刚好>=h[i]+1的prev
f[i][1] = f[prev][0] + min(h[prev],h[i]+1) * (i-prev-1)-(sum[i-1]-sum[prev])
取2者最大值

扩展到k单位,就枚举加在当前块i的单位数,加上二分查找前匹配块prev即可.结果会超int,需用LL
复杂度为O(k*k*nlogn)

  