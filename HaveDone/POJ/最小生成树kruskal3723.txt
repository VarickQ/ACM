#include <iostream>
#include <string.h>
#include <algorithm>
using namespace std;
#define ll long long

int fa[20005],n,m,r,ans;
struct edge{
	int x,y,value;
}e[50005];
bool cmp(edge a,edge b){
	return a.value > b.value;
}
int find(int x){
	if(fa[x]==x)return x;
	else return fa[x]=find(fa[x]);
}
void Kruskal(){
	ans = 0;
	for(int i=0; i < (n+m); i++)fa[i]=i;
	sort(e,e+r,cmp);
	for(int i=0; i < r; i++)
	{
		int x=find(fa[e[i].x]);
		int y=find(fa[e[i].y+n]);
		if(x != y){//union
			ans += e[i].value;
			fa[x]=y;
		}
	}
}
int main() {
    int t,i,j;
    scanf("%d\n",&t);
    while(t--)
    {
		scanf("%d%d%d",&n,&m,&r);
		for(i=0 ; i < r ; i++)
			scanf("%d%d%d",&e[i].x,&e[i].y,&e[i].value);
		Kruskal();
		printf("%d\n",(m+n)*10000-ans);
    }
    return 0;
}