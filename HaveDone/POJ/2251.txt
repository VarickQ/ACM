#include<iostream>
#include<queue>
using namespace std;

struct Point{
    int x,y,z;
    int step;
}start,end;

int dir[6][3]={{-1,0,0},{1,0,0},{0,-1,0},{0,1,0},{0,0,-1},{0,0,1}};
int l,r,c;
char Maze[31][31][31];

void BFS()
{
    queue<Point> Q;
    int vis[31][31][31];
    memset(vis,0,sizeof(vis));
    start.step=0;
    Q.push(start);
    vis[start.x][start.y][start.z] = true;
    while(!Q.empty())
    {
        Point p = Q.front();
        Q.pop();
        if(p.x==end.x && p.y==end.y && p.z==end.z)
        {
			printf("Escaped in %d minute(s).\n", p.step);
			return ;
        }
        for(int i=0;i<6;i++)
        {
            int x1 = p.x+dir[i][0];
            int y1 = p.y+dir[i][1];
            int z1 = p.z+dir[i][2];
            if(x1>=0 && x1<l && y1>=0 && y1<r && z1>=0 && z1<c && !vis[x1][y1][z1] && Maze[x1][y1][z1]!='#')
            {
                Point tmp;
                tmp.x=x1;
                tmp.y=y1;
                tmp.z=z1;
                tmp.step = p.step+1;
                vis[x1][y1][z1] = true;
                Q.push(tmp);
            }
        }
    }
    printf("Trapped!\n");
    return ;
}

int main()
{
	while(scanf("%d%d%d",&l,&r,&c) && (l+r+c))
	{
		int i,j,k;
		for(i=0 ; i<l ; i++)
			for(j=0 ; j<r ; j++)
				for(k=0 ; k<c ; k++)
				{
					cin >> Maze[i][j][k];
					if(Maze[i][j][k]=='S')
					{
						start.x=i; start.y=j; start.z=k;
					}
					if(Maze[i][j][k]=='E')
					{
						end.x=i; end.y=j; end.z=k;
					}
				}
		BFS();
	}
	return 0;
}