#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
#define inf 1000000000
const int N = 5008;
//http://www.cnblogs.com/rainydays/archive/2011/07/06/2099516.html
//双连通分支:
//     双连通分支分为对于边的和对于点的，对于点的是把所有割点去掉后剩下的图的每个连通分支即为原图的双连通分支。
//对于边的即去掉桥。
//     求割点和桥可以用tarjan算法，对图进行dfs，记录每个点的第一次到达时间dfn[i]。
//并记录一个low[i]表示该点及其子孙结点所能到达的dfn最小的点。这个到达并不是普通意义的到达，而是在遍历过程中，
//通过非树枝边（一定是返祖边，因为是无向图，没有横叉边）能够直接到达的点（而不是连续使用返祖边能到达的）。
//这样就可以把low总结为low[u] = min(low[v]（v为u的儿子结点）,dfn[v]（v是u通过返祖边能到达的点）,dfn(u));
//     然后我们可以粗略地认为返祖边可以连同树枝边共同构成一个环。对于边的双连通，环一定是双连通的（一定不是桥），
//不在环内的边一定是桥。对于点的双连通，如果一个点在环内，且是该环与外界的直接连接点，那么它一定是割点，
//环内其余点不是割点。不在环内的一定是割点。
//     这样我们就可以总结为：对于边的双连通，若边(u,v)，dfn[u]<low[v]（即不在环内），则为桥。
//对于点的双连通，若dfn[u]<=dfn[v]（小于是不在环内的点，等于是环与外界的唯一连接点），
//或者u为根且u有多个子树（说明u不在环内，因为没有横叉边）则为割点。
//     另外有定理，当把边的双连通分支缩点后形成了一个有向无环图，叶子（度为1的点）的个数为n，
//则需要在原图中添加(n + 1)/2条边，可以使原图变为没有桥的双连通图。
//本题要求的就是添加多少条边可变连通图。
struct E{
	int v,next;
}e[N*10];
bool mat[N][N],vis[N];
int heade[N],k,du[N];
int dfn[N],low[N],index;
//low相同的点在一个边连通分量中
//low[i]即为第i节点所在的连通分量的标号
void add(int u,int v){
	e[k].v = v;
	e[k].next = heade[u];
	heade[u] = k++;
	mat[u][v] = true;
}
void dfs(int u,int fa){
	vis[u] = true;
	low[u] = dfn[u] = ++index;
	for(int i=heade[u] ; i!=-1 ; i=e[i].next)
	{
		int v = e[i].v;
		if(v==fa) continue;
		if(!vis[v])
			dfs(v,u);
		if(low[u] > low[v])
			low[u] = low[v];
	}
}
int main()
{
	int n,m,i,j,a,b;
	while(scanf("%d%d",&n,&m) == 2)
	{
		memset(heade,-1,sizeof(heade));
		memset(mat,false,sizeof(mat));
		for(i=0,k=0 ; i < m ; i++){
			scanf("%d%d",&a,&b);
			//a--; b--;
			if(mat[a][b])continue;
			add(a,b);
			add(b,a);
		}
		memset(dfn,0,sizeof(dfn));
		memset(vis,0,sizeof(vis));
		memset(du,0,sizeof(du));
		index = 0;
		dfs(1,1);
		int ret = 0;
		for(i=1 ; i <= n ; i++)
			for(int j=heade[i] ; j!=-1 ; j=e[j].next)
			{//当把边的双连通分支缩点后形成了一个有向无环图，
			 //叶子（度为1的点）的个数为n，则需要在原图中添加(n + 1)/2条边，可以使原图变为没有桥的双连通图。
				int v = e[j].v;
				if(low[i] != low[v])
					du[low[i]]++;
			}
		for(i=1 ; i <= n ; i++)
			if(du[i] == 1)
				ret++;
		printf("%d\n",(ret+1)/2);
	}
	return 0;
}