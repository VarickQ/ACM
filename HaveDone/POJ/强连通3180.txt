#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define inf 1000000000
const int N = 10005;
struct E{
	int v,next;
}e[N*1000];
int link[N],dfn[N],low[N],stack[N],belong[N];
int k,bcnt,top,index;
bool instack[N];
void init(){
	memset(link,-1,sizeof(link));
	memset(dfn,0,sizeof(dfn));
	memset(low,0,sizeof(low));
	memset(instack,0,sizeof(instack));
	bcnt = top = index = k = 0;
}
void add(int u,int v){
	e[k].v = v;
	e[k].next = link[u];
	link[u] = k++;
}
void tarjan(int u){
	dfn[u] = low[u] = ++index;
	instack[u] = true;
	stack[top++] = u;
	for(int i=link[u] ; i!=-1 ; i=e[i].next){
		int v=e[i].v;
		if(!dfn[v]){
			tarjan(v);
			if(low[u] > low[v])
				low[u] = low[v];
		} else if(instack[v] && dfn[v] < low[u])
			low[u] = dfn[v];
	}
	if(low[u]==dfn[u]){
		bcnt++;
		int temp;
		do{
			temp = stack[--top];
			instack[temp] = false;
			belong[temp] = bcnt;
		}while(u != temp);
	}
}
int main()
{
	int n,m,i,a,b;
	while(scanf("%d%d",&n,&m)==2)
	{
		init();
		for(i=0 ; i < m ; i++){
			scanf("%d%d",&a,&b);
			add(a,b);
		}
		for(i=1 ; i <= n ; i++)
			if(!dfn[i]) tarjan(i);
		int ans = 0;
		for(i=1 ; i <= bcnt ; i++){
			int cnt = 0;
			for(int j=1 ; j <= n ; j++)
				if(belong[j]==i) cnt++;
			if(cnt>=2)ans++;
		}
		printf("%d\n",ans);
	}
	return 0;
}