#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
using namespace std;
#define inf 1<<30
//题意：
//Iserlohn要买运动鞋，商店总共有n双运动鞋Iserlohn喜欢，他总共有V元钱，这些运动鞋分为k类，没类都有自己的编号id，单价p，对Iserlohn的价值v。Iserlohn想每一类运动鞋至少买一双，在不超过他所拥有的总金额前提下，使他得到的v最大。
//状态设计：
//    如果没有品牌的分类，这个题就是经典的01背包问题；当然，这里有了品牌的分类，使用
//01背包自然是不行了；这就涉及到了加维。如何加维呢？加维的目的，是为了能够更好的表示
//状态，根据题意的要求状态的表示要求有二：A、每个品牌至少要有一件；B、钱的最大花费是
//有限制的；所以很容易我们就可以确定在一维的基础上加一维，用二维表示;
//    f[kind][money]   （kind表示当前已经拥有的品牌种类数目，money 表示当前已经花费了的前的数目）。
//状态转移：
//    根据我们的状态设计；
//当前状态的来源有二：A、当前品牌数目的前提之下取最大的值；
//                    B、在比当前数目小的基础之上放一个另外品牌的商品的最大值；
//所以我们就很容易就设计出状态转移方程：
//     f[j][v]= max(f[j][v], f[j][v-cost]+value);
//     f[j][v]= max(f[j][v], f[j-1][v-cost]+value);
int dp[11][10005];
struct A{
	int a,b,c;
}a[105];
bool cmp(A a,A b){
	return a.a < b.a;
}
int main()
{
	int n,m,k,i,j,l;
	while(scanf("%d%d%d",&n,&m,&k) == 3)
	{
		for(i=1 ; i <= n ; i++)
			scanf("%d%d%d",&a[i].a,&a[i].b,&a[i].c);
		sort(a+1,a+n+1,cmp);

		memset(dp,-1,sizeof(dp));
		dp[0][0]=0;
		for(i=1 ; i <= n ; i++)
			for(j=m ; j >= a[i].b ; j--)
			{
				if(dp[a[i].a][j-a[i].b] != -1){
					if(dp[a[i].a][j] < dp[a[i].a][j-a[i].b]+a[i].c)//同品牌更新到最优
						dp[a[i].a][j] = dp[a[i].a][j-a[i].b]+a[i].c;
				}
				if(dp[a[i].a-1][j-a[i].b] != -1){
					if(dp[a[i].a][j] < dp[a[i].a-1][j-a[i].b]+a[i].c)//前一品牌推倒后一品牌
						dp[a[i].a][j] = dp[a[i].a-1][j-a[i].b]+a[i].c;
				}
			}
		int ans=0;
		for(i=m ; i >= 0 ; i--)
			if(ans < dp[k][i])
				ans = dp[k][i];
		if(ans!=0)printf("%d\n",ans);
		else printf("Impossible\n");
	}
	return 0;
}