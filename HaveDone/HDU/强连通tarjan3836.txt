#include <iostream>
#include <vector>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
using namespace std;
#define N 20005
int n,m;
int belong[N],bcnt,stack[N],top;
int dfn[N],low[N],index,instack[N];
vector<int> v[N];
int in[N],out[N];
void tarjan(int u){
	dfn[u]=low[u]=++index;	//为节点u设定次序编号和Low初值
	instack[u] = true;		//标记进入栈
	stack[top++] = u;		//将节点u压入栈中
	for(int i=0 ; i < v[u].size() ; i++){//枚举每一条边
		if(!dfn[v[u][i]]){	//如果节点v未被访问过 
			tarjan(v[u][i]);			//继续向下找
			if(low[u]>low[v[u][i]])
				low[u]=low[v[u][i]];
		} else if(instack[v[u][i]] && dfn[v[u][i]]<low[u])//如果节点u还在栈内
			low[u]=dfn[v[u][i]];
	}
	if(dfn[u]==low[u])		//如果节点u是强连通分量的根
	{
		bcnt++;
		int temp;
		do{
			temp=stack[--top];	//将v退栈，为该强连通分量中一个顶点
			instack[temp] = false;
			belong[temp]=bcnt;	//缩点，bcnt就是强连通分量的个数
		}while(u!=temp);
	}
}
int main()
{
	int x,y,i,j;
	while(scanf("%d%d",&n,&m) == 2)
	{
		memset(stack,0,sizeof(stack));
		memset(dfn,0,sizeof(dfn));
		memset(low,0,sizeof(low));
		bcnt = index = top = 0;
		for(i=1 ; i <= n ; i++)v[i].clear();
		for(i=0 ; i < m ; i++){
			scanf("%d%d",&x,&y);
			v[x].push_back(y);
		}
		if(n==1){
			printf("0\n"); continue;
		}
		for(i=1 ; i <= n ; i++)
			if(!dfn[i])
				tarjan(i);
		if(bcnt==1){
			printf("0\n"); continue;
		}
		memset(in,0,sizeof(in));
		memset(out,0,sizeof(out));
		for(i=1 ; i <= n ; i++)
			for(j=0 ; j < v[i].size() ; j++)
				if(belong[i] != belong[v[i][j]])
				{
					out[belong[i]]++;
					in[belong[v[i][j]]]++;
				}
		int ans1=0,ans2=0;
		for(i=1 ; i <= bcnt ; i++){
			if(in[i]==0) ans1++;
			if(out[i]==0)ans2++;
		}
		printf("%d\n",max(ans1,ans2));
	}
	return 0;
}