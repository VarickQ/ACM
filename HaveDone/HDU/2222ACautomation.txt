#include <iostream>
using namespace std;

const int kind = 26;
struct node{
    node *fail,  *next[kind];
    int count;
    node(){
        fail = NULL;
		count = 0;
		memset(next, NULL, sizeof(next));
    }
} *q[500001];
char key[51];
char str[1000001];
int head,tail;

void insert(char *str,  node *root){ 
	node *p=root;
    int i=0, index;
    while(str[i]){
		index=str[i]-'a';
		if(p->next[index]==NULL) p->next[index]=new node();
		p=p->next[index];
		i++;
    }
    p->count++;
}
void build_ac_automation(node *root){ 
    root->fail=NULL;
	q[head++]=root;
    while(head!=tail)
	{
		node *temp=q[tail++],     *p=NULL; 
		for(int  i=0;i<26;i++){
			if(temp->next[i]!=NULL){
				if(temp==root) temp->next[i]->fail=root;               
                else{ 
                     p=temp->fail; 
                     while(p!=NULL){
						 if(p->next[i]!=NULL){
							temp->next[i]->fail=p->next[i];     break;
						 } 
						p=p->fail;
                     } 
                     if(p==NULL) temp->next[i]->fail=root;
				}
				q[head++]=temp->next[i];
			}
		}
	}
}
int query(node *root){
	int i=0,cnt=0,index,len=strlen(str);
	node *p=root;
	while(str[i]){
		index=str[i]-'a';  
		while(p->next[index]==NULL && p!=root) p=p->fail;  
		p=p->next[index];
		p=(p==NULL)?root:p;
		node *temp=p;
		while(temp!=root && temp->count!=-1){ 
			cnt+=temp->count;  	temp->count=-1;  temp=temp->fail;
		}
		i++;
	}
    return cnt; 
}

int main()
{
	int t,n;
	scanf("%d", &t);
	while(t--){
		head = tail = 0;
		node *root = new node();
		scanf("%d", &n);
		getchar();
		while(n--){
			gets(key);
			insert(key,root);
		}
		build_ac_automation(root);
		scanf("%s", str);
		printf("%d\n", query(root));
	}
	return 0;
}