//B
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

int main()
{
	int t,cs=1;
	char a[2000],b[2000];
	scanf("%d\n",&t);
	while(t--)
	{
		gets(a);
		gets(b);
		int l = strlen(a);
		printf("%d ",cs++);
		for(int i=0 ; i < l ; i++)
			if(a[i]==' ')printf(" ");
			else printf("%c",b[a[i]-'A']);
		printf("\n");
	}
	return 0;
}
//C
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

//讲n(10)转化为a进制，并且存在tmp中，并返回数组长度
int tmp[3][10];
int Tento(int n,int a,int f){
	int i=0;
	while(n){
		tmp[f][i++]=n%a; //i=i*10+n%a;
		n/=a;
	}
	return i;
}
int main()
{
	int t,cs=1,h,m,s;
	scanf("%d\n",&t);
	while(t--)
	{
		memset(tmp,0,sizeof(tmp));
		scanf("%d:%d:%d",&h,&m,&s);
		printf("%d ",cs++);
		Tento(h,2,0);
		Tento(m,2,1);
		Tento(s,2,2);
		for(int i=5 ; i >= 0 ; i--)
			for(int j=0 ; j < 3 ; j++)
				printf("%d",tmp[j][i]);
		printf(" ");
		for(int i=0 ; i < 3 ; i++)
			for(int j=5 ; j >= 0 ; j--)
				printf("%d",tmp[i][j]);
		printf("\n");
	}
	return 0;
}
//D
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;
#define ll long long

ll num[2005];
int main()
{
	int t,cs=1,n;
	num[0]=1;
	num[1]=1;
	num[2]=2;
	num[3]=2;
	num[4]=4;
	for(int i=5;i<=2000;i++)
		for(int j=0 ; j*2 <= i ; j++)
			num[i] += num[j];
	scanf("%d\n",&t);
	while(t--)
	{
		scanf("%d",&n);
		printf("%d %lld\n",cs++,num[n]);
	}
	return 0;
}
//G补
#include <iostream>
#include <string.h>
#include <algorithm>
using namespace std;

int v[6][3]={{0,-1,0},{0,1,0},{0,0,1},{0,0,-1},{-1,0,0},{1,0,0}};
struct Map{
	int x,y,z;
}map[105];
bool check(int x,int y,int z,int t){
	for(int i=1 ; i < t ; i++)
		if(map[i].x==x && map[i].y==y && map[i].z==z)
			return true;
	return false;
}
int main()
{
	int T,cs=1,i,j,n;
	int x,y,z,mx,my,mz;
	scanf("%d",&T);
	while(T--)
	{
		memset(map,0,sizeof(map));
		scanf("%d",&n);
		mx = my = mz = 0;
		for(i=1 ; i <= n ; i++){
			scanf("%d,%d,%d",&map[i].x,&map[i].y,&map[i].z);
			mx=map[i].x>mx?map[i].x:mx;
			my=map[i].y>my?map[i].y:my;
			mz=map[i].z>mz?map[i].z:mz;
		}
		int pos=0,f=1,ans=0;
		for(i=1 ; i <= n ; i++)
		{
			int count = 0;
			if(check(map[i].x,map[i].y,map[i].z,i)){
				f=0; pos=i; break;
			}
			for(j=0 ; j < 6 ; j++)
			{
				x=map[i].x+v[j][0];
				y=map[i].y+v[j][1];
				z=map[i].z+v[j][2];
				if(x>=0&&x<=mx&&my>=y&&y>=0&&mz>=z&&z>=0&&check(x,y,z,i))
					count++;
			}
			if(count==0&&i>1){//周围没有连接的块
				f=0; pos=i; break;
			}
			ans += 6-2*count;
		}
		if(f)printf("%d %d\n",cs++,ans);
		else printf("%d NO %d\n",cs++,pos);
	}
	return 0;
}