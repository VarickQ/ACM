//AC
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <map>
#include <stdlib.h>
#include <algorithm>
using namespace std;

int main(){
	int n,temp,i,j;
	/*freopen("out.txt","w",stdout);*/
	while(scanf("%d",&n) == 1)
	{
		int ans = 0;
		for(i=0 ; i*i < n ; i++){
			temp = n-i*i;
			double t = sqrt((double)temp);
			if(i>t)break;
			if(floor(t) == t)
				if(t==i || t==0 || i==0)
					ans += 4;
				else if(t != i)
					ans += 8;
		}
		printf("%d\n",ans);
	}
    return 0;
}
//1002补
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
#define MAXN 505

struct Node{
	char like[5],dislike[5];
}cat[MAXN],dog[MAXN];

int a[MAXN][MAXN];
int match[MAXN];
bool visited[MAXN];
int n,m,p,nc,nd;

bool find(int i){
	for(int j=0 ; j < nd ; j++)
		if(a[i][j] && !visited[j])
		{
			visited[j] = true;
			if(match[j]==-1 || find(match[j]))
			{
				match[j] = i;
				return true;
			}
		}
	return false;
}

int main()
{
	int T,i,j;
	char s1[5],s2[5];
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d%d",&n,&m,&p);
		nc = nd = 0;
		for(i=0 ; i < p ; i++){
			scanf("%s%s",s1,s2);
			if(s1[0] == 'C'){
				strcpy(cat[nc].like,s1);
				strcpy(cat[nc].dislike,s2);
				nc++;
			} else {
				strcpy(dog[nd].like,s1);
				strcpy(dog[nd].dislike,s2);
				nd++;
			}
		}
		memset(a,0,sizeof(a));
		for(i=0 ; i < nc ; i++)
			for(j=0 ; j < nd ; j++)
				if(strcmp(cat[i].like,dog[j].dislike)==0 || strcmp(cat[i].dislike,dog[j].like)==0)
					a[i][j] = 1;
		
		int ans = 0;
		memset(match,-1,sizeof(match));
		for(i=0 ; i < nc ; i++)
		{
			memset(visited,false,sizeof(visited));
			if(find(i)) ans++;
		}
		printf("%d\n",p-ans);
	}
	return 0;
}
//1006补
#include <iostream>
using namespace std;

int mark[100005];
int main()
{
	int T,n,num;
	scanf("%d",&T);
	while(T--)
	{
		memset(mark,0,sizeof(mark));
		scanf("%d",&n);
		int f=0;
		for(int i=0 ; i < n ; i++){
			scanf("%d",&num);
			mark[num] = 1;
			for(int j=1 ; j<num&&num+j<=n ; j++)
				if(mark[num-j]+mark[num+j]==1){
					f = 1;
					break;
				}
		}
		if(f)printf("Y\n");
		else printf("N\n");
	}
	return 0;
}
//1009补
#include <iostream>
#include <vector>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
using namespace std;
#define N 20005
int n,m;
int belong[N],bcnt,stack[N],top;
int dfn[N],low[N],index,instack[N];
vector<int> v[N];
int in[N],out[N];
void tarjan(int u){
	dfn[u]=low[u]=++index;	//为节点u设定次序编号和Low初值
	instack[u] = true;		//标记进入栈
	stack[top++] = u;		//将节点u压入栈中
	for(int i=0 ; i < v[u].size() ; i++){//枚举每一条边
		if(!dfn[v[u][i]]){	//如果节点v未被访问过 
			tarjan(v[u][i]);			//继续向下找
			if(low[u]>low[v[u][i]])
				low[u]=low[v[u][i]];
		} else if(instack[v[u][i]] && dfn[v[u][i]]<low[u])//如果节点u还在栈内
			low[u]=dfn[v[u][i]];
	}
	if(dfn[u]==low[u])		//如果节点u是强连通分量的根
	{
		bcnt++;
		int temp;
		do{
			temp=stack[--top];	//将v退栈，为该强连通分量中一个顶点
			instack[temp] = false;
			belong[temp]=bcnt;	//缩点，bcnt就是强连通分量的个数
		}while(u!=temp);
	}
}
int main()
{
	int x,y,i,j;
	while(scanf("%d%d",&n,&m) == 2)
	{
		memset(stack,0,sizeof(stack));
		memset(dfn,0,sizeof(dfn));
		memset(low,0,sizeof(low));
		bcnt = index = top = 0;
		for(i=1 ; i <= n ; i++)v[i].clear();
		for(i=0 ; i < m ; i++){
			scanf("%d%d",&x,&y);
			v[x].push_back(y);
		}
		if(n==1){
			printf("0\n"); continue;
		}
		for(i=1 ; i <= n ; i++)
			if(!dfn[i])
				tarjan(i);
		if(bcnt==1){
			printf("0\n"); continue;
		}
		memset(in,0,sizeof(in));
		memset(out,0,sizeof(out));
		for(i=1 ; i <= n ; i++)
			for(j=0 ; j < v[i].size() ; j++)
				if(belong[i] != belong[v[i][j]])
				{
					out[belong[i]]++;
					in[belong[v[i][j]]]++;
				}
		int ans1=0,ans2=0;
		for(i=1 ; i <= bcnt ; i++){
			if(in[i]==0) ans1++;
			if(out[i]==0)ans2++;
		}
		printf("%d\n",max(ans1,ans2));
	}
	return 0;
}
//1005补
#include <iostream>
#include <queue>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
using namespace std;
#define inf 10000000
#define eps 1e-6

int map[205][205],d[3][205],n;
struct Node{
	double x,y,r;
}p[205];
double dis(Node a,Node b){
	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
int v[205];
void SPFA(int u){
	memset(v,0,sizeof(v));
	queue<int> q;
	q.push(u);
	v[u] = 1;
	d[u][u]=0;
	while(!q.empty())
	{
		int x=q.front(); q.pop();
		for(int i=0 ; i < n ; i++)
			if(!v[i] && map[x][i])
			{
				v[i] = 1;
				d[u][i] = d[u][x]+1;
				q.push(i);
			}
	}
}
int main()
{
	int T,i,j;
	scanf("%d",&T);
	while(T--)
	{
		memset(map,0,sizeof(map));
		scanf("%d",&n);

		for(i=0 ; i < 3 ; i++)
			for(j=0 ; j < n ; j++)
				d[i][j] = inf;
		d[0][0]=d[1][1]=d[2][2]=0;

		for(i=0 ; i < n ; i++)
			scanf("%lf%lf%lf",&p[i].x,&p[i].y,&p[i].r);
		for(i=0 ; i < n ; i++)
			for(j=i+1 ; j < n ; j++)
				if(dis(p[i],p[j])-p[i].r-p[j].r <= eps)
					map[i][j]=map[j][i]=1;

		int ans = inf;
		SPFA(0);
		SPFA(1);
		SPFA(2);
		for(i=0 ; i < n ; i++)
			if(d[0][i]+d[1][i]+d[2][i]<ans)
				ans = d[0][i]+d[1][i]+d[2][i]+1;
		if(ans==inf) printf("-1\n");
		else printf("%d\n",n-ans);
	}
	return 0;
}