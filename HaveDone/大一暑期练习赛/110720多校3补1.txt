#include <stdio.h>//hdu 3863
#include <iostream>
#include <algorithm>
#include <math.h>
#include <vector>
#include <stdlib.h>
#include <string.h>
using namespace std;

int main()
{
	int n;
	while(scanf("%d",&n)==1)
	{
		if(n==-1)break;
		printf("I bet on Oregon Maple~\n");
	}
	return 0;
}
//1008 hdu 3866
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <math.h>
#include <stdlib.h>
#include <string.h>
using namespace std;

struct Node{
	int most,act;
	int id;
}a[10005];
bool cmp1(Node a,Node b){
	if(a.most==b.most)return a.id > b.id;
	return a.most < b.most;
}
bool cmp2(Node a,Node b){
	return a.id < b.id;
}
int main()
{
	int T,p,n,i;
	__int64 tot,per;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&p,&n);
		tot = 0;
		for(i=0 ; i < n ; i++){
			scanf("%d",&a[i].most);
			a[i].act = 0;
			a[i].id = i;
			tot += a[i].most;
		}
		if(tot < p){
			printf("IMPOSSIBLE\n");
			continue;
		}
		sort(a,a+n,cmp1);
		for(i=0 ; i < n ; i++)
		{
			per = p/(n-i);
			if(per >= a[i].most && a[i].act==0){
				p -= a[i].most;
				a[i].act = a[i].most;
			}
			else if(per < a[i].most){
				a[i].act += per;
				p -= per;
			}
		}
		i = 0;
		while(p){
			i = i%n;
			if(a[i].most-a[i].act>1){
				a[i].act++;
				p--;
			}
			i++;
		}
		sort(a,a+n,cmp2);
		for(i=0 ; i < n ; i++)
			if(!i)printf("%d",a[i].act);
			else printf(" %d",a[i].act);
		printf("\n");
	}
	return 0;
}
//1006 hdu 3864
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <math.h>
#include <vector>
#include <stdlib.h>
#include <string.h>
using namespace std;
#define M 7000005
bool su[M];
__int64 ss[M/2];
__int64 len=0;
void primes(int N)
{
	if(N==1)
		return;
	__int64 i,j;
	su[0] = su[1] = 0; su[2] = 1;
	for(i=4;i<=N;i+=2)
	{
		su[i-1] = 1;
		su[i] = 0;
	}
	ss[len++] = 2;
	for(i=3;i<N;i+=2)
	{
		if(!su[i]) continue;
		ss[len++] = i;
		for(j=i*i;j<N;j+=i)
			su[j] = 0;
	}
}
int main()
{
	int f;
	__int64 i,j,n,pos,t;
	primes(M-5);

	while(scanf("%I64d",&n) == 1)
	{
		t = pow(double(n),(1.0/3.0))+(1e-8);
		if(su[t] && t*t*t==n)
		{
			printf("%I64d %I64d %I64d\n",t,t*t,n);
			continue;
		}
		f = 0;
		t = (__int64)sqrt(double(n));
		pos = 1;
		for(i=0 ; i<len && ss[i]<= t ; i++)
		{
			if(n%ss[i]==0){
				j = n/ss[i];
				if(j==ss[i] || j%ss[i]==0)
				{
					f=2; break;
				}
				pos=ss[i];
				f++;
				if(f==2)break;
			}
		}
		if(f!=1)printf("is not a D_num\n");
		else printf("%I64d %I64d %I64d\n",pos,n/pos,n);
	}
	return 0;
}