#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

int main()
{
	int T,cs=1;
	double n;
	scanf("%d\n",&T);
	while(T--)
	{
		scanf("%lf",&n);
		printf("Case #%d: ",cs++);
		if(n >= 1.000)
			printf("Too Bright\n");
		else if(n>=0.400 && n<1.000)
			printf("1\n");
		else if(n>=0.160 && n<0.400)
			printf("2\n");
		else if(n>=0.063 && n<0.160)
			printf("3\n");
		else if(n>=0.025 && n<0.063)
			printf("4\n");
		else if(n>=0.010 && n<0.025)
			printf("5\n");
		else if(n>=0.004 && n<0.010)
			printf("6\n");
		else if(n<0.004)
			printf("Invisible\n");
	}
	return 0;
}              
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

int main()
{
	int T,cs=1,num[35],sp;
	char s[2000];
	scanf("%d\n",&T);
	while(T--)
	{
		gets(s);
		memset(num,0,sizeof(num));
		sp = 0;
		for(int i=0 ; s[i] ; i++)
		{
			if(s[i]==' ')sp++;
			else num[s[i]-'a']++;
		}
		int ans=sp;
		for(int i=0 ; i<=26 ; i++){
			if( (i+'a') == 'g' ){
				if(num[i] > 2){
					if(ans > num[i]-1)
						ans = num[i]-1;
				}
				else if(ans > num[i]/2)
					ans = num[i]/2;
			}
			else if((i+'a') == 'o'){
				if(ans > num[i]/3)
					ans = num[i]/3;
			}
			else if((i+'a') == 'd'){
				if(ans > num[i])
					ans = num[i];
			}
			else if((i+'a') == 'm'){
				if(ans > num[i])
					ans = num[i];
			}
			else if((i+'a') == 'r'){
				if(ans > num[i])
					ans = num[i];
			}
			else if((i+'a') == 'n'){
				if(ans > num[i]/2)
					ans = num[i]/2;
			}
			else if((i+'a') == 'i'){
				if(ans > num[i])
					ans = num[i];
			}
		}
		printf("Case #%d: %d\n",cs++,ans);
	}
	return 0;
}
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;
#define N 1005

int tree[N*3],n;
bool f1,f2;
bool findheap(int id,bool small){
	if(id >= n || tree[id]==-1) return f1;
	if( small ){
		if(tree[2*id]>tree[id]&&tree[2*id]!=-1 || tree[2*id+1]>tree[id]&&tree[2*id+1]!=-1)
			return false;
	} else {
		if(tree[2*id]<tree[id]&&tree[2*id]!=-1 || tree[2*id+1]<tree[id]&&tree[2*id+1]!=-1)
			return false;
	}
	f1=findheap(2*id,small);
	f1=findheap(2*id+1,small);
	return f1;
}
bool findbst(int id,bool small){
	if(id >= n || tree[id]==-1) return f2;
	if( small ){
		if(tree[id*2]>tree[id]&&tree[id*2]!=-1 || tree[id*2+1]<tree[id]&&tree[id*2+1]!=-1)
			return false;
	} else {
		if(tree[id*2]<tree[id]&&tree[id*2]!=-1 || tree[id*2+1]>tree[id]&&tree[id*2+1]!=-1)
			return false;
	}
	f2=findbst(2*id,small);
	f2=findbst(2*id+1,small);
	return f2;
}
int main()
{
	int T,cs=1,i;
	scanf("%d\n",&T);
	while(T--)
	{
		memset(tree,-1,sizeof(tree));
		scanf("%d",&n);
		for(i=1 ; i <= n ; i++)
			scanf("%d",&tree[i]);
		printf("Case #%d: ",cs++);
		if(n==1 || n==2){
			printf("Both\n"); continue;
		}
		if(tree[1]<tree[2] && tree[1]>tree[3])f1=false;
		else if(tree[1]>tree[2] && tree[1]<tree[3])f1=false;
		else f1 = true;
		if(tree[1]<tree[2] && tree[1]<tree[3] )
			f1 =findheap(1,0);
		else f1=findheap(1,1);

		if(tree[1]<tree[2] && tree[1]<tree[3])f2=false;
		else if(tree[1]>tree[2] && tree[1]>tree[3])f2=false;
		else f2 = true;
		if(tree[1]>tree[2] && tree[1]<tree[3])
			f2 = findbst(1,1);
		else f2= findbst(1,0);
		if(f1 && !f2)
			printf("Heap\n");
		else if(!f1 && f2)
			printf("BST\n");
		else if(f1 && f2)
			printf("Both\n");
		else if(!f1 && !f2)
			printf("Neither\n");
	}
	return 0;
}
//ฒน
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
using namespace std;
#define N 100005
#define inf 1<<31-1
struct A{
	long long v,r,t;
	void init(){
		v=r=t=0;
	}
	friend bool operator<(const A &x,const A &y)
	{
		return x.t > y.t;
	}
}a[N];
priority_queue<A> q;
bool cmp(A a,A b){
	if(a.r == b.r)return a.v < b.v;
	return a.r < b.r;
}
int main()
{
	int T,cs=1,i,j,n,m,f;
	scanf("%d\n",&T);
	while(T--)
	{
		scanf("%d%d",&n,&m);
		f = 0;
		for(i=0 ; i < n ; i++){
			scanf("%lld %lld %lld",&a[i].v,&a[i].r,&a[i].t);
			if(a[i].r==1) f=1;
		}
		printf("Case #%d: ",cs++);
		if(!f){
			printf("-1\n"); continue;
		}
		sort(a,a+n,cmp);
			/*for(j=0,f=0 ; j < i ; j++)
				if(a[j].v >= a[i].r){
					f = 1;
					if(dp[i] > dp[j]+a[i].t)
						dp[i] = dp[j]+a[i].t;
				}
			if(!f)break;*/
		long long ans=-1;
		while(!q.empty())q.pop();
		A now,next;
		q.push(a[0]);
		for(i=0,f=0 ; i < n ; i++)
		{
			now.init();
			next.init();
			while(!q.empty()){
				now = q.top();
				if(now.v >=m){
					ans=now.t; f=1; break;
				}
				if(now.v >= a[i].r){
					if(a[i].v > now.v)
					{
						next = a[i];
						next.t += now.t;
						q.push(next);
					}
					break;
				}
				else q.pop();
			}
			if(f)break;
		}
		if(ans==-1)
			while(!q.empty()){
				now = q.top();
				if(now.v >= m){
					ans = now.t; f=1; break;
				}
				else q.pop();
			}
		if(f)printf("%lld\n",ans);
		else printf("-1\n");
	}
	return 0;
}