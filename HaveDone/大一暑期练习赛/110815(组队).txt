#include<stdio.h>//A
#include<iostream>
#include<algorithm>
#include<string.h>
#include<math.h>
#include<csetjmp>
#include<bitset>
#include<cassert>
#include<cctype>
#include<climits>
#include<cmath>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<fstream>
#include<functional>
#include<iomanip>
#include<iostream>
#include<limits>
#include<list>
#include<map>
#include<numeric>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<utility>
#include<vector>
using namespace std;
char str[100010];
int main()
{
	int i,j,T,k,ans;
	scanf("%d\n",&T);
	while(T--)
	{
		ans=0;
		gets(str);
		int len=strlen(str);
		for(i=0;i<len-1;i++)
			if(str[i]==':')
			{
				if(str[i+1]=='(')
				{
					if(i+2<len&&str[i+2]=='(')
					{
						i++;
						ans-=5;
					}
					else ans-=1;
					i++;
				}
				else if(str[i+1]==')')
				{
					if(i+2<len&&str[i+2]==')')
					{
						i++;
						ans+=4;
					}
					else ans+=2;
					i++;
				}
			}
		printf("%d\n",ans);
	}
	return 0;
}
#include <stdio.h>//B
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <set>
using namespace std;
const int inf=2000000000;
const int N = 750000;
const int M = 100000;
int a[100010];
int main()
{
	int n,T,i;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&n);
		for(i=1 ; i <= 4 ; ++i)
			scanf("%d",&a[i]);
		for(i=5 ; i <= n ; ++i)
			a[i] = a[i-4]+a[i-1];
		sort(a+1,a+n+1);
		printf("%d\n",a[(n+1)/2]);
		
	}
	return 0;
}
#include <stdio.h>//C
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <set>
using namespace std;
const int inf=2000000000;
const int N = 750000;
int main()
{
	int T,r,t,n,ans,now;
	scanf("%d",&T);
	while(T--){
		ans = 0;
		scanf("%d%d%d",&r,&t,&n);
		now = r;
		while(now < n){
			now += now/r;
			ans++;
		}
		printf("%d\n",now*t);
	}
	return 0;
}
#include <stdio.h>//D
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <set>
using namespace std;
const int inf=2000000000;
const int N = 10000;

char str[N+5];
char cs[505];
int main()
{
	int T,n,len,ans,pos;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%s",&n,str);
		len = strlen(str);
		ans = 0;
		for(int i=0 ; i < n ; ++i){
			scanf("%s",cs);
			int l = strlen(cs);
			for(int j=0 ; j < len ; ++j)
				for(int k=0 ; k < l ; ++k)
					if(str[j] == cs[k]){
						pos = 0;
						while(j+pos<len && k+pos<l){
							++pos;
							if(str[j+pos] != cs[k+pos])
								break;
						}
						if(ans < pos) ans = pos;
					}
		}
		printf("%d\n",ans);
	}
	return 0;
}
#include<stdio.h>//E
#include<iostream>
#include<algorithm>
#include<string.h>
#include<math.h>
using namespace std;
char v[110][100010];
struct point
{
	int x1,x2,y1,y2;
}w[110];
int ok(point a,point b)
{
	if(a.x1>b.x1) swap(a,b);
	if(a.x2>b.x1)
	{
		if(b.y1>a.y1&&b.y1<a.y2) return 0;
		if(b.y2>a.y1&&b.y1<a.y2) return 0;
	}
	return 1;
}
int main()
{
	int T,i,n,m,j;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&n,&m);
		for(i=0;i<n;++i)
		{
			scanf("%d%d%d%d",&w[i].x1,&w[i].y1,&w[i].x2,&w[i].y2);
			scanf("%s",v[i]);
		}
		int day=0,f=0;
		while(day<m)
		{
			for(i=0;i<n;++i)
			{
				if(v[i][day]=='L') w[i].x1--;
				else if(v[i][day]=='R') w[i].x2++;
				else if(v[i][day]=='U') w[i].y2++;
				else w[i].y1--;
			}
			for(i=0;i<n;++i) 
			{
				for(j=i+1;j<n;++j)
					if(!ok(w[i],w[j])) 
					{
						f=1;
						break;
					}
				if(f) break;
			}
			if(f) break;
			day++;
		}
		if(day==m) day=-2; 
		printf("%d\n",day+1);
	}
	return 0;
}
#include<stdio.h>//G
#include<iostream>
#include<algorithm>
#include<string.h>
#include<math.h>
using namespace std;
const int inf=2000000000;
const int N = 100010;
const int M = 100010;
int su[1000010],qu[1000010];
int dp[500010];
int id[1000010];
void S()
{
	memset(su,0,sizeof(su));
	su[1]=su[0]=1;
	int k=0;
	for(int i=2;i<=1000000;i++)
		if(!su[i])
		{
			qu[k++]=i;
			for(int j=i*2;j<=1000000;j+=i)
				su[j]=1;
		}
}
int main()
{
	S();
	int t,r,n,i,j=-1,k,T,ans,m,a,b;
	for(i=2;i<=1000000;++i)
	{
		if(!su[i]) id[i]=++j;
		else id[i]=j;
	}
	for(i=2;i<=50000;++i)
	{
		if(!su[i]) t=1;
		else t=0;
		for(j=id[i*2-1];qu[j]>i;--j)
			if(!su[i*2-qu[j]]) t++;
		dp[i]=dp[i-1]+t;
	}
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&n);
		printf("%d\n",dp[n]);
	}
	return 0;
}
#include <stdio.h>//H
#include <string.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <set>
using namespace std;
const int inf=123456789;
const int N = 10000;
//////////////////////////////////////
#define MAX 70
#define mod 10000
#define baselen 4
#define in(a) scanf("%d",&a);
#define out1(a) printf("%d",a)
#define out2(a) printf("%04d",a)
typedef int type;
/////////////////////////////////////
struct bint{
	type dig[MAX], len;
	bint(){len = 0, dig[0] = 0;}
};
////////////////////////////////////////////
//常用函数
//(1)
void add(bint a, bint b, bint& c){
	type i, carry ;
	for( i = carry = 0; i <= a.len || i <= b.len || carry; i++){
		  if(i<=a.len)carry += a.dig[i];
		  if(i<=b.len)carry += b.dig[i];
		  c.dig[i] = carry%mod;
		  carry /= mod;
	}
	c.len = i - 1;
}
//(2)
void add(bint a, type b, bint& c){
	type i;
	for( i  = 0; i <= a.len || b; i++){
		if(i<=a.len)b += a.dig[i];
		c.dig[i] = b%mod;
		b /= mod;
	}
	c.len = i-1;
}
//(3)
void by(bint a, type b, bint& c){
	type i, carry;
	for( i = carry = 0; i <= a.len || carry; i++){
		if( i <= a.len ) carry += b*a.dig[i];
		c.dig[i] = carry%mod;
		carry /= mod;
	}
	i--;
	while( i && !c.dig[i] )i--;
	c.len = i;
}
//(4)
void by(bint a, bint b, bint& c){
	type i, j, carry;
	for( i=a.len+b.len+1; i>=0; i--)c.dig[i] = 0;
	for( i=0; i<=a.len; i++){
		carry = 0;
		for( j=0; j<=b.len||carry; j++){
			carry  += c.dig[i+j];
			if(j<=b.len)carry += a.dig[i]*b.dig[j];
			c.dig[i+j] = carry%mod;
			carry /= mod;
		}
	}
	i = a.len+b.len+1;
	while(i&&c.dig[i]==0)i--;
	c.len = i;
}
//(5)
void div(bint a, type b, bint& c, type& d){
	type i;
	for(i = a.len,d = 0; i>=0 ; i--){
		d = d*mod + a.dig[i];
		c.dig[i] = d/b;
		d = d%b;		
	}
	i = a.len;
	while(i&&c.dig[i]==0)i--;
	c.len = i;
}
//(6)
bool input(bint& a){
	type i, j, w, k;
	char data[MAX*baselen+1];
	if(scanf("%s",data)==EOF)return false;
	w = strlen(data) - 1, a.len = 0;;
	while(1){
		i = j = 0, k = 1;
		while(i<baselen&&w>=0){
			j = j+ (data[w--] - '0')*k;
			k *= 10, i++;
		}
		a.dig[a.len++] = j;
		if(w<0)break;
	}
	a.len--;
	return true;
}
//(7)
void output(bint& a){
	type i;
	i = a.len - 1;
	out1(a.dig[a.len]);
	while(i>=0)out2(a.dig[i--]);
}
////////////////////////////////////////////////////////////////////////
//少用函数
//(8)
void move(bint& a){
	type carry, k, t;
	k = a.len+1, carry = 0;
	while(k--){
		t = a.dig[k]&1;
		a.dig[k] = (a.dig[k]>>1);
		if(carry)a.dig[k] += (mod>>1);
		carry = t;
	}
	if(a.len&&a.dig[a.len]==0)a.len--;
}
//(9)
void sub(bint a, bint b, bint& c){
	type i, carry;
	for( i=carry=0; i<=a.len; i++){
		c.dig[i] = a.dig[i]-carry;
		if(i<=b.len)c.dig[i] -= b.dig[i];
		if(c.dig[i]<0)carry = 1, c.dig[i] += mod;
		else carry = 0;
	}
	i--;
	while(i&&c.dig[i]==0)i--;
	c.len = i;
}
//(10)
void sub(bint a, type b, bint& c){
	type i;
	for( i=0; i<=a.len; i++){
		c.dig[i] = a.dig[i]-b;
		if(c.dig[i]<0)b = 1, c.dig[i] += mod;
		else b = 0;
	}
	i--;
	while(i&&c.dig[i]==0)i--;
	c.len = i;
}
//(11)
int cmp(bint a, bint b){
	if(a.len<b.len)return -1;
	if(a.len>b.len)return 1;
	int i = a.len;
	while(i&&a.dig[i]==b.dig[i])i--;
	return a.dig[i] - b.dig[i];
}
//(12)
void give(bint a, bint& b){
	int i = 0;
	while(i<=a.len){
		b.dig[i] = a.dig[i];
		i++;
	}
	b.len = a.len;
}
//(13)
void give(type a, bint& b){
	b.dig[0] = a%mod;
	a /= mod;
	if(a>0)b.dig[1] = a, b.len = 1;
	else b.len = 0;
}
//(14)
void shift(bint& a, type k){
	int i;
	i = a.len+k;
	while(i>=k){
		a.dig[i] = a.dig[i-k];
		i --;
	}
	while(i>=0)a.dig[i--] = 0;
	a.len += k;
}
//(15)
void div(bint a, bint b, bint& c, bint& d){
	type x, k;
	bint temp;
	give(a, d);
	c.len = c.dig[0] = 0;
	while( cmp(d,b)>0 ){
		k = d.len - b.len;
		if( d.dig[d.len] > b.dig[b.len] )
			x = d.dig[d.len] / (b.dig[b.len] + 1);
		else if( k )
			k--, x =  ( d.dig[d.len]*mod + d.dig[d.len-1])/(b.dig[b.len] + 1);
		else break;
		by( b, x, temp);
		shift( temp, k );
		sub(d, temp, d);
		give( x, temp );
		shift(temp, k);
		add(c, temp, c);
	}
	if(cmp(d,b)>=0) sub(d,b,d), add(c,(type)1, c); 	
}

int main()
{
	int T,n,d;
	bool f;
	bint a,c;
	scanf("%d",&T);
	while(T--)
	{
		give(inf,a);//123456789
		f = false;
		int lim = 100;
		scanf("%d",&n);
		//input(n);
		int count = 0;
		while(lim--){
			div(a,n,c,d);
			if(d==0){
				f = true;
				output(a);
				printf("\n");
				break;
			}
			else {
				if(count<9){
					by(a,10,c);
					count ++;
				}
				else{
					add(a,inf,c);
					count = 0;
				}
				give(c,a);
			}
		}
	}
	return 0;
}
#include<stdio.h>//J
#include<iostream>
#include<algorithm>
#include<string.h>
#include<math.h>
using namespace std;
int a[33][33];
int mark[66],v[66];
int mpp[66][66];
int n;
int dfs(int x)
{
	for(int i=1;i<=n;++i)
	{
		if(mpp[x][i]&&!mark[i])
		{
			mark[i]=1;
			if(!v[i]||dfs(v[i]))
			{
				v[i]=x;
				return 1;
			}
		}
	}
	return 0;
}
int main()
{
	int T,i,j,ans;
	scanf("%d",&T);
	while(T--)
	{
		memset(v,0,sizeof(v));
		memset(mpp,0,sizeof(mpp));
		scanf("%d",&n);
		for(i=1;i<=n;++i) for(j=1;j<=n;++j)
		{
			scanf("%d",&a[i][j]);
			if(a[i][j]) mpp[j][i]=1;
		}
		ans=0;
		for(i=1;i<=n;++i)
		{
			memset(mark,0,sizeof(mark));
			ans+=dfs(i);
		}
		printf("%d\n",ans);
	}
	return 0;
}