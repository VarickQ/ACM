#include<cstdio>
#include<cstdlib>
#include<time.h>
#include<vector>
using namespace std;
#ifdef WIN32
typedef __int64 LL;
#else
typedef long long LL;
#endif
const int S = 20;
vector<LL> factor;
LL muti_mod(LL a, LL b, LL c){ //返回(a*b) mod c,a,b,c<2^63
	a %= c;
	b %= c;
	LL ret = 0;
	while(b){
		if(b&1){
			ret += a;
			if(ret>=c)
				ret -= c;
		}
		a <<= 1;
		if(a>=c)
			a -= c;
		b >>= 1;
	}
	return ret;
}

LL pow_mod(LL x, LL n, LL mod){ //返回x^n mod c ,非递归版
	if(n==1)
		return x%mod;
	int bit[64], k = 0;
	while(n){
		bit[k++] = n&1;
		n >>= 1;
	}
	LL ret = 1;
	for(k = k-1; k>=0; k--){
		ret = muti_mod(ret, ret, mod);
		if(bit[k]==1)
			ret = muti_mod(ret, x, mod);
	}
	return ret;
}

bool check(LL a, LL n, LL x, LL t){ //以a为基，n-1=x*2^t，检验n是不是合数
	LL ret = pow_mod(a, x, n), last = ret;
	for(int i = 1; i<=t; i++){
		ret = muti_mod(ret, ret, n);
		if(ret==1&&last!=1&&last!=n-1)
			return 1;
		last = ret;
	}
	if(ret!=1)
		return 1;
	return 0;
}

bool Miller_Rabin(LL n){
	LL x = n-1, t = 0;
	while((x&1)==0)
		x >>= 1, t++;
	bool flag = 1;
	if(t>=1&&(x&1)==1){
		for(int k = 0; k<S; k++){
			LL a = rand()%(n-1)+1;
			if(check(a, n, x, t)){
				flag = 1;
				break;
			}
			flag = 0;
		}
	}
	if(!flag||n==2)
		return 0;
	return 1;
}

LL gcd(LL a, LL b){
	if(a==0)
		return 1;
	if(a<0)
		return gcd(-a, b);
	while(b){
		LL t = a%b;
		a = b;
		b = t;
	}
	return a;
}

LL Pollard_rho(LL x, LL c){
	LL i = 1, x0 = rand()%x, y = x0, k = 2;
	while(1){
		i++;
		x0 = (muti_mod(x0, x0, x)+c)%x;
		LL d = gcd(y-x0, x);
		if(d!=1&&d!=x){
			return d;
		}
		if(y==x0)
			return x;
		if(i==k){
			y = x0;
			k += k;
		}
	}
}

void findfac(LL n){ //递归进行质因数分解N
	if(!Miller_Rabin(n)){
		factor.push_back(n);
		return;
	}
	LL p = n;
	while(p>=n)
		p = Pollard_rho(p, rand()%(n-1)+1);
	findfac(p);
	findfac(n/p);
}

int main(){
	srand(time(NULL));
	int tests;
	scanf("%d", &tests);
	for(; tests; tests--){
		LL n;
		scanf("%I64d", &n);
		if(n<=2)printf("No\n");
		else if(!Miller_Rabin(n))
			printf("No\n");
		else{
			factor.clear();
			findfac(n);
			LL min = n;
			for(vector<LL>::iterator i = factor.begin(); i!=factor.end(); i++)
				if(*i<min)
					min = *i;
			if(!Miller_Rabin(min) && !Miller_Rabin(n/min))
				printf("Yes\n");
			else printf("No\n");
		}
	}
	return 0;
}
#include <stdio.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define ll long long
const int N = 65537+500;
//111111111
//119357639
//380642361
//388888889
//611111111
//619357639
//880642361
//888888889
int main()
{
	int n;
	while(scanf("%d",&n) == 1)
	{
		if(n<=8)printf("0\n");
		else if(n==9)printf("8\n");
		else{
			printf("72");
			for(int i=10;i<n;i++)
				printf("0");
			printf("\n");
		}
	}
	return 0;
}
//补
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
#define ll long long
const int N = 70000;

struct Node{
	ll num,id;
}a[N];
ll c[N],n,b[N];
bool cmp(Node a,Node b){
	return a.num < b.num;
}
ll Lowbit(ll t){
    return t & ( -t );
}
void update(ll pos){
	while(pos <= n){
		c[pos] += 1;
		pos += Lowbit(pos);
	}
}
ll Getsum(ll end){
	ll sum = 0;
	while(end > 0){
		sum += c[end];
		end -= Lowbit(end);
	}
	return sum;
}
int main()
{
	ll i,ans;
	while(scanf("%lld",&n) != EOF)
	{
		memset(b,0,sizeof(b));
		memset(c,0,sizeof(c));
		for(i=1 ; i <= n ; i++){
			scanf("%d",&a[i].num);
			a[i].id = i;
		}
		sort(a+1,a+n+1,cmp);
		int k=1;
		b[a[1].id] = 1;
		for(i=2 ; i <= n ; i++){
			if(a[i].num!=a[i-1].num)k++;
			b[a[i].id] = k;
		}

		ans = 0;
		for(i=1 ; i <= n ; i++)
		{
			update(b[i]);
			ans += Getsum(n)-Getsum(b[i]);
		}
		printf("%lld\n",ans);
	}
	return 0;
}
//补 SGU199
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
using namespace std;
const int inf = 2000000000;
const int N = 100000+100;

struct A{
	int s,b,id;
}a[N];
int b[N],ans[N],pre[N],n;
bool cmp(A a,A b){
	if(a.s == b.s)return a.b > b.b;
	return a.s < b.s;
}
int main()
{
	int i,j;
	while(scanf("%d",&n) != EOF)
	{
		memset(b,0,sizeof(b));
		memset(pre,0,sizeof(pre));
		for(i=1 ; i <= n ; i++){
			scanf("%d%d",&a[i].s,&a[i].b);
			a[i].id = i;
		}
		sort(a+1,a+n+1,cmp);
		ans[1] = 1;
		b[1] = a[1].b;
		int l,r,len = 1;
		for(i=2 ; i <= n ; i++)
		{
			if(a[i].b > b[len]){
				j = ++len;
			} else {
				j = l = 1; r = len;
				while(l <= r){
					int mid = (l+r)>>1;
					if(a[i].b > b[mid])
						j = l = mid+1;
					else r = mid-1;
				}
			}
			b[j] = a[i].b;
			ans[j] = i;
			pre[i] = ans[j-1];
		}
		printf("%d\n",len);
		for(j=0,i=ans[len] ; i ; i=pre[i])
			ans[j++] = a[i].id;
		sort(ans,ans+len);
		for(i=0 ; i < len-1 ; i++)
			printf("%d ",ans[i]);
		printf("%d\n",ans[i]);
	}
	return 0;
}