/*
POJ 2823
大意：
有n个数字，依次为a[1],a[2],a[3]...a[n],
定义 maxA[i] = max(a[i],a[i+1]...a[i+k-1])
     minA[i] = min(a[i],a[i+1]....a[i+k-1])
求i=1到n-k之间所有的maxA[i]值，和minA[i]值
*/

#include<stdio.h>
#include<string.h>
const int N = 1000001;
/*线段树的节点*/
struct Node
{
	int left,right;//左右边界
	int min,max;//该区间内的最小值，最大值
};

Node node[N*3];
int a[N];//a[i]记录第i个位置上的数字


inline int Min(int a,int b)
{
	return a<b?a:b;
}

inline int Max(int a,int b)
{
	return a>b?a:b;
}

//建树
void createTree(int L,int R,int id)
{
   node[id].left = L;
   node[id].right = R;

   //叶子节点
   if(node[id].left==node[id].right)
   {
       node[id].min = a[L];
	   node[id].max = a[L];
	   return;
   }

   int mid = (node[id].left+node[id].right)>>1;
   
   //左子树
   createTree(L,mid,2*id);
   //右子树
   createTree(mid+1,R,2*id+1);
    
   node[id].min = Min(node[2*id].min,node[2*id+1].min);
   node[id].max = Max(node[2*id].max,node[2*id+1].max);
}

/*求解区间[L,R]之间某个最值*/
int search(int L,int R,int id, int (*function)(int,int))
{
	if(node[id].left>=L&&node[id].right<=R)
		return function(node[id].min,node[id].max);

	int mid = (node[id].left+node[id].right)>>1;

	if(R<=mid)//在左子树
	   return search(L,R,2*id,function);

    if(L>mid)//位于右子树
	   return search(L,R,2*id+1,function);

	//分别位于左右子树
	return function(search(L,mid,2*id,function),search(mid+1,R,2*id+1,function));

}

int main()
{
	int i,n,k;
	scanf("%d%d",&n,&k);
    for(i=1;i<=n;i++)
		scanf("%d",&a[i]);

	createTree(1,n,1);

	int last = n-k+1;
	for(i=1;i<last;i++)
		printf("%d ", search(i,i+k-1,1,Min));//获取区间[i,i+k-1]的答案
    printf("%d\n",search(i,i+k-1,1,Min));

	for(i=1;i<last;i++)
		printf("%d ",search(i,i+k-1,1,Max));
	printf("%d\n",search(i,i+k-1,1,Max));

	return 0;
}


