/*
输入n个数，及数字k,
输出
  第一行：Min(a[i]...a[i+k-1])，其中i从0到n-k
  第二行： Max(a[i]....a[i+k-1]) i值同上
  n ≤ 10^6
思路：线段树
*/

#include<stdio.h>
const int N = 10000001;

struct Node
{
	int left;
	int right;
	int min;
	int max;
};

Node node[N*2];
int a[N];
int m[N];
int ma[N];
inline int GMin(int a,int b)
{
	if(a>b)return b;
	return a;
}
inline int GMax(int a,int b)
{
	if(a>b)return a;
	return b;
}
void CreateTree(int L,int R,int id)//建树
{
	
	node[id].left=L;
	node[id].right=R;
	if(L==R)
	{
		node[id].min=a[L];
		node[id].max=a[L];
		return;
	}

	int mid = (L+R)/2;
	CreateTree(L,mid,id*2);
	CreateTree(mid+1,R,id*2+1);
	node[id].min=GMin(node[id*2].min,node[2*id+1].min);
	node[id].max=GMax(node[id*2].max,node[2*id+1].max);

}

int GetMin(int L,int R,int id)
{
	if(node[id].left==L&&node[id].right==R)
	{
		return node[id].min;

	}

	if(node[id].left<node[id].right)
	{
		int mid = (node[id].left+node[id].right)/2;
		if(L>mid)//右子树
		{
			return GetMin(L,R,id*2+1);
		}
		else
			if(R<=mid)
			{
				return GetMin(L,R,id*2);
			}
			else
			{
				return GMin(GetMin(L,mid,id*2),GetMin(mid+1,R,id*2+1));
			}
	}
	return node[id].min;
}

int GetMax(int L,int R,int id)
{
	if(node[id].left==L&&node[id].right==R)
	{
		return node[id].max;

	}

	if(node[id].left<node[id].right)
	{
		int mid = (node[id].left+node[id].right)/2;
		if(L>mid)//右子树
		{
			return GetMax(L,R,id*2+1);
		}
		else
			if(R<=mid)
			{
				return GetMax(L,R,id*2);
			}
			else
			{
				return GMax(GetMax(L,mid,id*2),GetMax(mid+1,R,id*2+1));
			}
	}
	return node[id].max;
}
int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	for(int i = 1;i<=n;i++)
	{
		scanf("%d",&a[i]);
	}
	CreateTree(1,n,1);
	int end=n-k+1,i;
	for( i=1;i<end;i++)
	{
		printf("%d ",GetMin(i,i+k-1,1));
	}
	printf("%d\n",GetMin(i,i+k-1,1));

	for( i=1;i<end;i++)
	{
		printf("%d ",GetMax(i,i+k-1,1));
	}

	printf("%d\n",GetMax(i,i+k-1,1));
}

